What happens when you initialize a repository? Why do you need to do it? 

you cd into where you want to init it so that you can create a new
repository with no initial commits
you need to do it so that you can create a new project.


How is the staging area different from the working directory and the repository? What value do you think it offers?

its an in between so that you know what your doing when you make a commit

How can you use the staging area to make sure you have one commit per logical change?

Run git diff with no arguments to see how many changes
you've introduced in the working directory vs. the staging area.
To double check the files you've changed are really what you want you
might want to compare whats inside:
the staging area->repository->(last commit made)

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you want to add and experimental feature but aren't ready to make
it official. Or when you're making a version of a game in another
language.


How do the diagrams help you visualize the branch structure?

They clearly lay out the history of the master 
and any branches off of it and those branches' histories as well.


What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

merging two branches updates the master to
have all of the changes from the merged branch.
It tells you if theres a manual change you must do with
<<<<<<<< and >>>>>>>>> with the lines
that its having trouble deciding what to do with in between.


What are the pros and cons of Gitâ€™s automatic
merging vs. always doing merges manually?

Pro: less compile/run errors due to 'overenthusiastic' merging.
You can decide what to do when theres different
contradicting code in the same area
Con to manual: Merging EVERYTHING manually would take forever
Con to Git: might not merge enough, or how much you'd expect it to.



